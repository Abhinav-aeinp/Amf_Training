/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.amf.registration.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.amf.registration.model.Registration;
import com.liferay.training.amf.registration.model.RegistrationModel;
import com.liferay.training.amf.registration.model.RegistrationSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Registration service. Represents a row in the &quot;Registration_Registration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RegistrationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegistrationImpl
 * @generated
 */
@JSON(strict = true)
public class RegistrationModelImpl
	extends BaseModelImpl<Registration> implements RegistrationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registration model instance should use the <code>Registration</code> interface instead.
	 */
	public static final String TABLE_NAME = "Registration_Registration";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"firstname", Types.VARCHAR},
		{"lastname", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"username", Types.VARCHAR}, {"password_", Types.VARCHAR},
		{"gender", Types.VARCHAR}, {"dob", Types.TIMESTAMP},
		{"homephone", Types.VARCHAR}, {"mobilephone", Types.VARCHAR},
		{"address1", Types.VARCHAR}, {"address2", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"state_", Types.VARCHAR},
		{"zipcode", Types.VARCHAR}, {"securityquestion", Types.VARCHAR},
		{"answer", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("homephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobilephone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("securityquestion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answer", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Registration_Registration (uuid_ VARCHAR(75) null,userID LONG not null primary key,groupId LONG,firstname VARCHAR(75) null,lastname VARCHAR(75) null,email VARCHAR(75) null,username VARCHAR(75) null,password_ VARCHAR(75) null,gender VARCHAR(75) null,dob DATE null,homephone VARCHAR(75) null,mobilephone VARCHAR(75) null,address1 VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipcode VARCHAR(75) null,securityquestion VARCHAR(75) null,answer VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Registration_Registration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY registration.userID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Registration_Registration.userID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Registration toModel(RegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Registration model = new RegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserID(soapModel.getUserID());
		model.setGroupId(soapModel.getGroupId());
		model.setFirstname(soapModel.getFirstname());
		model.setLastname(soapModel.getLastname());
		model.setEmail(soapModel.getEmail());
		model.setUsername(soapModel.getUsername());
		model.setPassword(soapModel.getPassword());
		model.setGender(soapModel.getGender());
		model.setDob(soapModel.getDob());
		model.setHomephone(soapModel.getHomephone());
		model.setMobilephone(soapModel.getMobilephone());
		model.setAddress1(soapModel.getAddress1());
		model.setAddress2(soapModel.getAddress2());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZipcode(soapModel.getZipcode());
		model.setSecurityquestion(soapModel.getSecurityquestion());
		model.setAnswer(soapModel.getAnswer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Registration> toModels(RegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Registration> models = new ArrayList<Registration>(
			soapModels.length);

		for (RegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Registration.class;
	}

	@Override
	public String getModelClassName() {
		return Registration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Registration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Registration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Registration)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Registration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Registration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Registration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Registration, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Registration, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Registration>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Registration.class.getClassLoader(), Registration.class,
			ModelWrapper.class);

		try {
			Constructor<Registration> constructor =
				(Constructor<Registration>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Registration, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Registration, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Registration, Object>>();
		Map<String, BiConsumer<Registration, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Registration, ?>>();

		attributeGetterFunctions.put("uuid", Registration::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Registration, String>)Registration::setUuid);
		attributeGetterFunctions.put("userID", Registration::getUserID);
		attributeSetterBiConsumers.put(
			"userID", (BiConsumer<Registration, Long>)Registration::setUserID);
		attributeGetterFunctions.put("groupId", Registration::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Registration, Long>)Registration::setGroupId);
		attributeGetterFunctions.put("firstname", Registration::getFirstname);
		attributeSetterBiConsumers.put(
			"firstname",
			(BiConsumer<Registration, String>)Registration::setFirstname);
		attributeGetterFunctions.put("lastname", Registration::getLastname);
		attributeSetterBiConsumers.put(
			"lastname",
			(BiConsumer<Registration, String>)Registration::setLastname);
		attributeGetterFunctions.put("email", Registration::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Registration, String>)Registration::setEmail);
		attributeGetterFunctions.put("username", Registration::getUsername);
		attributeSetterBiConsumers.put(
			"username",
			(BiConsumer<Registration, String>)Registration::setUsername);
		attributeGetterFunctions.put("password", Registration::getPassword);
		attributeSetterBiConsumers.put(
			"password",
			(BiConsumer<Registration, String>)Registration::setPassword);
		attributeGetterFunctions.put("gender", Registration::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<Registration, String>)Registration::setGender);
		attributeGetterFunctions.put("dob", Registration::getDob);
		attributeSetterBiConsumers.put(
			"dob", (BiConsumer<Registration, Date>)Registration::setDob);
		attributeGetterFunctions.put("homephone", Registration::getHomephone);
		attributeSetterBiConsumers.put(
			"homephone",
			(BiConsumer<Registration, String>)Registration::setHomephone);
		attributeGetterFunctions.put(
			"mobilephone", Registration::getMobilephone);
		attributeSetterBiConsumers.put(
			"mobilephone",
			(BiConsumer<Registration, String>)Registration::setMobilephone);
		attributeGetterFunctions.put("address1", Registration::getAddress1);
		attributeSetterBiConsumers.put(
			"address1",
			(BiConsumer<Registration, String>)Registration::setAddress1);
		attributeGetterFunctions.put("address2", Registration::getAddress2);
		attributeSetterBiConsumers.put(
			"address2",
			(BiConsumer<Registration, String>)Registration::setAddress2);
		attributeGetterFunctions.put("city", Registration::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Registration, String>)Registration::setCity);
		attributeGetterFunctions.put("state", Registration::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Registration, String>)Registration::setState);
		attributeGetterFunctions.put("zipcode", Registration::getZipcode);
		attributeSetterBiConsumers.put(
			"zipcode",
			(BiConsumer<Registration, String>)Registration::setZipcode);
		attributeGetterFunctions.put(
			"securityquestion", Registration::getSecurityquestion);
		attributeSetterBiConsumers.put(
			"securityquestion",
			(BiConsumer<Registration, String>)
				Registration::setSecurityquestion);
		attributeGetterFunctions.put("answer", Registration::getAnswer);
		attributeSetterBiConsumers.put(
			"answer",
			(BiConsumer<Registration, String>)Registration::setAnswer);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userID = userID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public String getFirstname() {
		if (_firstname == null) {
			return "";
		}
		else {
			return _firstname;
		}
	}

	@Override
	public void setFirstname(String firstname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstname = firstname;
	}

	@JSON
	@Override
	public String getLastname() {
		if (_lastname == null) {
			return "";
		}
		else {
			return _lastname;
		}
	}

	@Override
	public void setLastname(String lastname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastname = lastname;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_username = username;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	@JSON
	@Override
	public String getHomephone() {
		if (_homephone == null) {
			return "";
		}
		else {
			return _homephone;
		}
	}

	@Override
	public void setHomephone(String homephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_homephone = homephone;
	}

	@JSON
	@Override
	public String getMobilephone() {
		if (_mobilephone == null) {
			return "";
		}
		else {
			return _mobilephone;
		}
	}

	@Override
	public void setMobilephone(String mobilephone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobilephone = mobilephone;
	}

	@JSON
	@Override
	public String getAddress1() {
		if (_address1 == null) {
			return "";
		}
		else {
			return _address1;
		}
	}

	@Override
	public void setAddress1(String address1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address1 = address1;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address2 = address2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getZipcode() {
		if (_zipcode == null) {
			return "";
		}
		else {
			return _zipcode;
		}
	}

	@Override
	public void setZipcode(String zipcode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipcode = zipcode;
	}

	@JSON
	@Override
	public String getSecurityquestion() {
		if (_securityquestion == null) {
			return "";
		}
		else {
			return _securityquestion;
		}
	}

	@Override
	public void setSecurityquestion(String securityquestion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_securityquestion = securityquestion;
	}

	@JSON
	@Override
	public String getAnswer() {
		if (_answer == null) {
			return "";
		}
		else {
			return _answer;
		}
	}

	@Override
	public void setAnswer(String answer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_answer = answer;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Registration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Registration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Registration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegistrationImpl registrationImpl = new RegistrationImpl();

		registrationImpl.setUuid(getUuid());
		registrationImpl.setUserID(getUserID());
		registrationImpl.setGroupId(getGroupId());
		registrationImpl.setFirstname(getFirstname());
		registrationImpl.setLastname(getLastname());
		registrationImpl.setEmail(getEmail());
		registrationImpl.setUsername(getUsername());
		registrationImpl.setPassword(getPassword());
		registrationImpl.setGender(getGender());
		registrationImpl.setDob(getDob());
		registrationImpl.setHomephone(getHomephone());
		registrationImpl.setMobilephone(getMobilephone());
		registrationImpl.setAddress1(getAddress1());
		registrationImpl.setAddress2(getAddress2());
		registrationImpl.setCity(getCity());
		registrationImpl.setState(getState());
		registrationImpl.setZipcode(getZipcode());
		registrationImpl.setSecurityquestion(getSecurityquestion());
		registrationImpl.setAnswer(getAnswer());

		registrationImpl.resetOriginalValues();

		return registrationImpl;
	}

	@Override
	public int compareTo(Registration registration) {
		long primaryKey = registration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Registration)) {
			return false;
		}

		Registration registration = (Registration)object;

		long primaryKey = registration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Registration> toCacheModel() {
		RegistrationCacheModel registrationCacheModel =
			new RegistrationCacheModel();

		registrationCacheModel.uuid = getUuid();

		String uuid = registrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			registrationCacheModel.uuid = null;
		}

		registrationCacheModel.userID = getUserID();

		registrationCacheModel.groupId = getGroupId();

		registrationCacheModel.firstname = getFirstname();

		String firstname = registrationCacheModel.firstname;

		if ((firstname != null) && (firstname.length() == 0)) {
			registrationCacheModel.firstname = null;
		}

		registrationCacheModel.lastname = getLastname();

		String lastname = registrationCacheModel.lastname;

		if ((lastname != null) && (lastname.length() == 0)) {
			registrationCacheModel.lastname = null;
		}

		registrationCacheModel.email = getEmail();

		String email = registrationCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			registrationCacheModel.email = null;
		}

		registrationCacheModel.username = getUsername();

		String username = registrationCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			registrationCacheModel.username = null;
		}

		registrationCacheModel.password = getPassword();

		String password = registrationCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			registrationCacheModel.password = null;
		}

		registrationCacheModel.gender = getGender();

		String gender = registrationCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			registrationCacheModel.gender = null;
		}

		Date dob = getDob();

		if (dob != null) {
			registrationCacheModel.dob = dob.getTime();
		}
		else {
			registrationCacheModel.dob = Long.MIN_VALUE;
		}

		registrationCacheModel.homephone = getHomephone();

		String homephone = registrationCacheModel.homephone;

		if ((homephone != null) && (homephone.length() == 0)) {
			registrationCacheModel.homephone = null;
		}

		registrationCacheModel.mobilephone = getMobilephone();

		String mobilephone = registrationCacheModel.mobilephone;

		if ((mobilephone != null) && (mobilephone.length() == 0)) {
			registrationCacheModel.mobilephone = null;
		}

		registrationCacheModel.address1 = getAddress1();

		String address1 = registrationCacheModel.address1;

		if ((address1 != null) && (address1.length() == 0)) {
			registrationCacheModel.address1 = null;
		}

		registrationCacheModel.address2 = getAddress2();

		String address2 = registrationCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			registrationCacheModel.address2 = null;
		}

		registrationCacheModel.city = getCity();

		String city = registrationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			registrationCacheModel.city = null;
		}

		registrationCacheModel.state = getState();

		String state = registrationCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			registrationCacheModel.state = null;
		}

		registrationCacheModel.zipcode = getZipcode();

		String zipcode = registrationCacheModel.zipcode;

		if ((zipcode != null) && (zipcode.length() == 0)) {
			registrationCacheModel.zipcode = null;
		}

		registrationCacheModel.securityquestion = getSecurityquestion();

		String securityquestion = registrationCacheModel.securityquestion;

		if ((securityquestion != null) && (securityquestion.length() == 0)) {
			registrationCacheModel.securityquestion = null;
		}

		registrationCacheModel.answer = getAnswer();

		String answer = registrationCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			registrationCacheModel.answer = null;
		}

		return registrationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Registration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Registration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Registration)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Registration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Registration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Registration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Registration)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Registration>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _userID;
	private long _groupId;
	private String _firstname;
	private String _lastname;
	private String _email;
	private String _username;
	private String _password;
	private String _gender;
	private Date _dob;
	private String _homephone;
	private String _mobilephone;
	private String _address1;
	private String _address2;
	private String _city;
	private String _state;
	private String _zipcode;
	private String _securityquestion;
	private String _answer;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Registration, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Registration)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("userID", _userID);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("firstname", _firstname);
		_columnOriginalValues.put("lastname", _lastname);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("username", _username);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("dob", _dob);
		_columnOriginalValues.put("homephone", _homephone);
		_columnOriginalValues.put("mobilephone", _mobilephone);
		_columnOriginalValues.put("address1", _address1);
		_columnOriginalValues.put("address2", _address2);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("zipcode", _zipcode);
		_columnOriginalValues.put("securityquestion", _securityquestion);
		_columnOriginalValues.put("answer", _answer);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("password_", "password");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("userID", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("firstname", 8L);

		columnBitmasks.put("lastname", 16L);

		columnBitmasks.put("email", 32L);

		columnBitmasks.put("username", 64L);

		columnBitmasks.put("password_", 128L);

		columnBitmasks.put("gender", 256L);

		columnBitmasks.put("dob", 512L);

		columnBitmasks.put("homephone", 1024L);

		columnBitmasks.put("mobilephone", 2048L);

		columnBitmasks.put("address1", 4096L);

		columnBitmasks.put("address2", 8192L);

		columnBitmasks.put("city", 16384L);

		columnBitmasks.put("state_", 32768L);

		columnBitmasks.put("zipcode", 65536L);

		columnBitmasks.put("securityquestion", 131072L);

		columnBitmasks.put("answer", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Registration _escapedModel;

}